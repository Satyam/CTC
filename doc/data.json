{
    "project": {
        "name": "ctc",
        "description": "Control de tr√°fico centralizado",
        "version": "0.1.0",
        "url": "https://github.com/Satyam/CTC.git"
    },
    "files": {
        "js/component/EventEmitter.js": {
            "name": "js/component/EventEmitter.js",
            "modules": {
                "Events": 1
            },
            "classes": {
                "EventEmitter": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/component/http.js": {
            "name": "js/component/http.js",
            "modules": {
                "http": 1
            },
            "classes": {
                "http": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/component/parcel.js": {
            "name": "js/component/parcel.js",
            "modules": {
                "parcel": 1
            },
            "classes": {
                "Parcel": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/component/parcelEv.js": {
            "name": "js/component/parcelEv.js",
            "modules": {
                "parcelEv": 1
            },
            "classes": {
                "ParcelEv": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/component/radio.js": {
            "name": "js/component/radio.js",
            "modules": {
                "radio": 1
            },
            "classes": {
                "Radio": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/component/tabView.js": {
            "name": "js/component/tabView.js",
            "modules": {
                "TabView": 1
            },
            "classes": {
                "TabView": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/component/virtual-dom.js": {
            "name": "js/component/virtual-dom.js",
            "modules": {
                "virtual-DOM": 1
            },
            "classes": {
                "vDOM": 1,
                "vNode": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "Browserify": {
            "name": "Browserify",
            "submodules": {
                "Events": 1
            },
            "classes": {
                "EventEmitter": 1
            },
            "fors": {},
            "namespaces": {},
            "file": "js/component/EventEmitter.js",
            "line": 18
        },
        "Events": {
            "name": "Events",
            "submodules": {},
            "classes": {
                "EventEmitter": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "Browserify",
            "namespace": "",
            "file": "js/component/EventEmitter.js",
            "line": 18,
            "description": "Browserify implementation of NodeJS Events module.\n\nThis is for *documentation purposes only*.\n\nThe information herein was taken from NodeJS documentation and reformatted in JSDoc format.\n\nMany objects in Node emit events: a net.Server emits an event each time a peer connects to it, a fs.readStream emits an event when the file is opened. All objects which emit events are instances of events.EventEmitter. You can access this module by doing: require(\"events\");\n\nTypically, event names are represented by a camel-cased string, however, there aren't any strict restrictions on that, as any string will be accepted.\n\nFunctions can then be attached to objects, to be executed when an event is emitted. These functions are called listeners. Inside a listener function, this refers to the EventEmitter that the listener was attached to."
        },
        "utilities": {
            "name": "utilities",
            "submodules": {
                "http": 1
            },
            "classes": {
                "http": 1
            },
            "fors": {},
            "namespaces": {},
            "file": "js/component/http.js",
            "line": 9
        },
        "http": {
            "name": "http",
            "submodules": {},
            "classes": {
                "http": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "utilities",
            "namespace": "",
            "file": "js/component/http.js",
            "line": 9,
            "description": "Helper functions to generate standard HTTP requests using the \n[xhr](https://www.npmjs.com/package/xhr) npm module.\n\nIt is integrated with the rendering engine so that upon completion of a request,\na redraw is requested."
        },
        "Parcela": {
            "name": "Parcela",
            "submodules": {
                "parcel": 1,
                "parcelEv": 1,
                "virtual-DOM": 1
            },
            "classes": {
                "Parcel": 1,
                "ParcelEv": 1,
                "vDOM": 1,
                "vNode": 1
            },
            "fors": {},
            "namespaces": {},
            "file": "js/component/virtual-dom.js",
            "line": 793
        },
        "parcel": {
            "name": "parcel",
            "submodules": {},
            "classes": {
                "Parcel": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "Parcela",
            "namespace": "",
            "file": "js/component/parcel.js",
            "line": 11,
            "description": "Represents a section of real state in the HTML page.\n\nAll Parcela apps should inherit from this class.\n\nSeveral properties might be configured on instantiation:\n\n* [containerType](#property_containerType)\n* [className](#property_className)\n* [attributes](#property_attributes)\n* [text](#property_text)"
        },
        "parcelEv": {
            "name": "parcelEv",
            "submodules": {},
            "classes": {
                "ParcelEv": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "Parcela",
            "namespace": "",
            "file": "js/component/parcelEv.js",
            "line": 32,
            "description": "Subclass of [Parcel](Parcel.html) capable of listening and\nrelaying DOM events.\n\nBesides the configuration attributes used by [Parcel](Parcel.html),\n`ParcelEv` accepts the `EVENTS` property which is a hash map of DOM events to listen to.\n\nEach entry into `EVENTS` must contain the name of a DOM event (i.e.: `click`, `keypress`)\nfollowed either by a listener function or a further object.\n\n* A function can be given as a reference or as a string with the name of the method within this class\n  that handles it.  The function will be called whenever that event is fired.\n* If an object, it should be a hash map of CSS selectors and functions.\n  This limits the kind of DOM element or elements whose events you want to listen to.\n  The function will then be called only when the element generating it satisfies the condition.\n\n`ParcelEv` will queue a request to redraw the page unless any of the listeners cancels it by returning a **truish** value.\n\n`ParcelEv` is also an `EventEmitter` thus, it will have methods to deal with custom events.\nSee: [NodeJS EventEmitter](https://nodejs.org/docs/latest/api/events.html)"
        },
        "Components": {
            "name": "Components",
            "submodules": {
                "radio": 1,
                "TabView": 1
            },
            "classes": {
                "Radio": 1,
                "TabView": 1
            },
            "fors": {},
            "namespaces": {},
            "file": "js/component/tabView.js",
            "line": 13
        },
        "radio": {
            "name": "radio",
            "submodules": {},
            "classes": {
                "Radio": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "Components",
            "namespace": "",
            "file": "js/component/radio.js",
            "line": 12,
            "description": "Provides a set of HTML radio buttons optionally enclosed in a `<fieldset>`.\nEmits the [`click`](#event_click) when clicked."
        },
        "TabView": {
            "name": "TabView",
            "submodules": {},
            "classes": {
                "TabView": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "Components",
            "namespace": "",
            "file": "js/component/tabView.js",
            "line": 13,
            "description": "Provides a set of tabs to show alternate content on the screen.\n\nEach tab is described by an object within the `tabs` array in the initial configuration.\nThe array is required to ensure the order of the tabs.\n\nIndividual tabs can be left-justified or right-justified.\nThe left-justified are usually the variable ones,\nnew tabs can be added to them and existing ones removed.\nIf the `canClose` configuration property is true or missing,\nthe markup in the [closeTag](#property_closeTag) will be shown\nby the label.\n\nThe right-justified, if present, are usually fixed in number.\n\nEach tab is identified by a `name` that should be unique within the TabView.\nThe `label` property provides the text to be shown in the tab.\nThis can be localized and if missing, it defaults to the `name`.\nThe `content` should be an instance of [Parcel](Parcel.html),\n\nIn the tabs configuration, a separator marks the split point in between the sets of left and right justified tabs.\nA `null` will not be displayed.  Any other thing will produce a tab with no contents\nand its label given by the markup in the [moreTag](#property_moreTag) property.\nWhen clicked the [more](#event_more) event is emitted for the application to add a new tab."
        },
        "virtual-DOM": {
            "name": "virtual-DOM",
            "submodules": {},
            "classes": {
                "vDOM": 1,
                "vNode": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "Parcela",
            "namespace": "",
            "file": "js/component/virtual-dom.js",
            "line": 793,
            "description": "Provides virtual dom functionality for other modules."
        }
    },
    "classes": {
        "EventEmitter": {
            "name": "EventEmitter",
            "shortname": "EventEmitter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "ParcelEv"
            ],
            "module": "Browserify",
            "submodule": "Events",
            "namespace": "",
            "file": "js/component/EventEmitter.js",
            "line": 18,
            "description": "To access the EventEmitter class, require('events').EventEmitter.\n\nWhen an EventEmitter instance experiences an error, the typical action is to emit an 'error' event. Error events are treated as a special case in node. If there is no listener for it, then the default action is to print a stack trace and exit the program.\n\nAll EventEmitters emit the event 'newListener' when new listeners are added and 'removeListener' when a listener is removed."
        },
        "http": {
            "name": "http",
            "shortname": "http",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "utilities",
            "submodule": "http",
            "namespace": "",
            "file": "js/component/http.js",
            "line": 9,
            "description": "Helper functions to generate standard HTTP requests using the \n[xhr](https://www.npmjs.com/package/xhr) npm module.\n\nIt is integrated with the rendering engine so that upon completion of a request,\na redraw is requested.",
            "static": 1
        },
        "Parcel": {
            "name": "Parcel",
            "shortname": "Parcel",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Parcela",
            "submodule": "parcel",
            "namespace": "",
            "file": "js/component/parcel.js",
            "line": 11,
            "description": "Represents a section of real state in the HTML page.\n\nAll Parcela apps should inherit from this class.\n\nSeveral properties might be configured on instantiation:\n\n* [containerType](#property_containerType)\n* [className](#property_className)\n* [attributes](#property_attributes)\n* [text](#property_text)",
            "params": [
                {
                    "name": "config",
                    "description": "Initial configuration.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "is_constructor": 1
        },
        "ParcelEv": {
            "name": "ParcelEv",
            "shortname": "ParcelEv",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Parcela",
            "submodule": "parcelEv",
            "namespace": "",
            "file": "js/component/parcelEv.js",
            "line": 32,
            "description": "Subclass of [Parcel](Parcel.html) capable of listening and\nrelaying DOM events.\n\nBesides the configuration attributes used by [Parcel](Parcel.html),\n`ParcelEv` accepts the `EVENTS` property which is a hash map of DOM events to listen to.\n\nEach entry into `EVENTS` must contain the name of a DOM event (i.e.: `click`, `keypress`)\nfollowed either by a listener function or a further object.\n\n* A function can be given as a reference or as a string with the name of the method within this class\n  that handles it.  The function will be called whenever that event is fired.\n* If an object, it should be a hash map of CSS selectors and functions.\n  This limits the kind of DOM element or elements whose events you want to listen to.\n  The function will then be called only when the element generating it satisfies the condition.\n\n`ParcelEv` will queue a request to redraw the page unless any of the listeners cancels it by returning a **truish** value.\n\n`ParcelEv` is also an `EventEmitter` thus, it will have methods to deal with custom events.\nSee: [NodeJS EventEmitter](https://nodejs.org/docs/latest/api/events.html)",
            "example": [
                "\n      class MyDialogBox extends ParcelEv {\n\t  \t\tconstructor(config) {\n\t\t\t\tsuper({\n\t\t\t\t\tEVENTS: {\n\t\t\t\t\t\t// Listening to keypresses anywhere within this Parcel\n\t\t\t\t\t\t'keypress': this.onKeyPress\n\t\t\t\t\t\t// Listening to clicks on specific elements within the Parcel\n\t\t\t\t\t\t'click': {\n\t\t\t\t\t\t\t// only on a button with the className `ok` on it.\n\t\t\t\t\t\t\t'button.ok': this.onOk,\n\t\t\t\t\t\t\t// The function reference is given as a string which translates to `this.onCancel`\n\t\t\t\t\t\t\t'button.cancel':'onCancel'\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t// Other configuration options will be passed to the Parcel constructor\n\t\t\t\t\tclassName: 'dialog'\n\t\t\t\t});\n\t\t\t}\n\t\t\t// Methods handling the functions, will receive the original DOM event object.\n\t\t\t// Their `this` will be that of the instance of ParcelEv.\n\t\t\tonKeyPress (ev) {}\n\t\t\tonOk (ev) {}\n\t\t\tonCancel (ev) {}\n\t\t}"
            ],
            "extends": "Parcel",
            "uses": [
                "EventEmitter"
            ],
            "is_constructor": 1,
            "params": [
                {
                    "name": "config",
                    "description": "Initial configuration",
                    "type": "Object",
                    "optional": true
                }
            ]
        },
        "Radio": {
            "name": "Radio",
            "shortname": "Radio",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Components",
            "submodule": "radio",
            "namespace": "",
            "file": "js/component/radio.js",
            "line": 12,
            "description": "Provides a set of HTML radio buttons optionally enclosed in a `<fieldset>`.\nEmits the [`click`](#event_click) when clicked.",
            "example": [
                "\n\tvar desviado = new Radios({\n\t\ttitle:'Desv√≠o',\n\t\tselected: celda.desviado?'desviado':'normal',\n\t\topts: [\n\t\t\t{normal: 'Normal'},\n\t\t\t{desviado: 'Desviado'}\n\t\t]\n\t}).on('click', this.cambiar.bind(this));"
            ],
            "extends": "ParcelEv",
            "is_constructor": 1,
            "params": [
                {
                    "name": "config",
                    "description": "configuration options",
                    "type": "Object",
                    "props": [
                        {
                            "name": "opts",
                            "description": "Set of options to choose from.  Each is an object with the value to identify each option as its key and the text to be shown as its value.\tIt has to be an array to ensure the order of the buttons.",
                            "type": "Array of Objects"
                        },
                        {
                            "name": "selected",
                            "description": "value of the radio selected",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "title",
                            "description": "If present, a `<fieldset>` will enclose the buttons and this set as its legend",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "groupName",
                            "description": "A `name` to be assigned to the set of radios.  If not provided, a unique name will be generated.",
                            "type": "String",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "TabView": {
            "name": "TabView",
            "shortname": "TabView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Components",
            "submodule": "TabView",
            "namespace": "",
            "file": "js/component/tabView.js",
            "line": 13,
            "description": "Provides a set of tabs to show alternate content on the screen.\n\nEach tab is described by an object within the `tabs` array in the initial configuration.\nThe array is required to ensure the order of the tabs.\n\nIndividual tabs can be left-justified or right-justified.\nThe left-justified are usually the variable ones,\nnew tabs can be added to them and existing ones removed.\nIf the `canClose` configuration property is true or missing,\nthe markup in the [closeTag](#property_closeTag) will be shown\nby the label.\n\nThe right-justified, if present, are usually fixed in number.\n\nEach tab is identified by a `name` that should be unique within the TabView.\nThe `label` property provides the text to be shown in the tab.\nThis can be localized and if missing, it defaults to the `name`.\nThe `content` should be an instance of [Parcel](Parcel.html),\n\nIn the tabs configuration, a separator marks the split point in between the sets of left and right justified tabs.\nA `null` will not be displayed.  Any other thing will produce a tab with no contents\nand its label given by the markup in the [moreTag](#property_moreTag) property.\nWhen clicked the [more](#event_more) event is emitted for the application to add a new tab.",
            "example": [
                "\n\t{\n\t\ttabs: [\n\t\t\t{\n\t\t\t\tname: 'firstTab'\n\t\t\t\tlabel: 'First Tab to the Left',\n\t\t\t\tcontent: new Parcel('whatever')\n\t\t\t},\n\t\t\t....\n\t\t\tnull,  // separator\n\t\t\t{\n\t\t\t\tname: 'firstRightTab'\n\t\t\t\tlabel: 'First Tab to the right of the separator',\n\t\t\t\tcontent: new Parcel('something else')\n\t\t\t},\n\t\t\t...\n\t\t],\n\t\tselected: 'firstTab'\n\t}"
            ],
            "extends": "ParcelEv",
            "is_constructor": 1,
            "params": [
                {
                    "name": "config",
                    "description": "configuration options",
                    "type": "Object",
                    "props": [
                        {
                            "name": "selected",
                            "description": "name of the tab to be shown, defaults to the first.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "canClose",
                            "description": "adds a close icon to each of the left-justified tabs.",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "tabs",
                            "description": "Set of tabs to display. It has to be an array to ensure the order of the tabs. Each entry can be:\n\n* `null`: It acts as an invisible separator.  The tabs before it will be left-justified, the ones after, right justified.  The `null` will not take any space.\n* Anything not an object or `null`: It acts as a separator, just as `null` but a tab with no content will be shown, containing the markup produced by [moreTag](#property_moreTag). When clicked, it emits the [more](#event_more) event. It is meant to be used as a cue to add extra tabs.\n* An object, containing the following properties",
                            "type": "Array of Objects OR String"
                        },
                        {
                            "name": "tabs[n].name",
                            "description": "Internal identifier for the tab.",
                            "type": "String"
                        },
                        {
                            "name": "tabs[n].label",
                            "description": "Label to be shown on the tab, defaults to its `name`.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "tabs[n].content",
                            "description": "Instance of Parcel to be shown when this tab is selected.",
                            "type": "Parcel"
                        }
                    ]
                }
            ]
        },
        "vDOM": {
            "name": "vDOM",
            "shortname": "vDOM",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Parcela",
            "submodule": "virtual-DOM",
            "namespace": "",
            "file": "js/component/virtual-dom.js",
            "line": 12,
            "description": "Contains the virtual DOM handling methods and properties"
        },
        "vNode": {
            "name": "vNode",
            "shortname": "vNode",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Parcela",
            "submodule": "virtual-DOM",
            "namespace": "",
            "file": "js/component/virtual-dom.js",
            "line": 793,
            "description": "Internal, virtual representation of an actual DOM node.\nThere are two sub-versions of it.\n\n* For text nodes, the vNode will be an instance of String\n  with an extra `node` property.\n* For nodes corresponding to Parcel containers, the node\n  will have the extra `parcel` and `stamp` properties.\n\nThe virtual DOM version differs from that produced by the\n[Parcel.view](Parcel.html#method_view) method in that it has the `node`\nproperty set.\n\nThis entry is just for documentation purposes.\nThere is no actual code for this class.  It is created as an object literal.",
            "access": "protected",
            "tagname": "",
            "static": 1
        }
    },
    "classitems": [
        {
            "file": "js/component/EventEmitter.js",
            "line": 29,
            "description": "Adds a listener to the end of the listeners array for the specified event. No checks are made to see if the listener has already been added. Multiple calls passing the same combination of event and listener will result in the listener being added multiple times.",
            "example": [
                "\n\tserver.addListener('connection', function (stream) {\n\t  console.log('someone connected!');\n\t});\n\nReturns emitter, so calls can be chained."
            ],
            "itemtype": "method",
            "name": "addListener",
            "params": [
                {
                    "name": "name",
                    "description": "Identifier of the event to subscribe to",
                    "type": "String"
                },
                {
                    "name": "listener",
                    "description": "Callback function to receive the event",
                    "type": "Function"
                }
            ],
            "chainable": 1,
            "class": "EventEmitter",
            "module": "Browserify",
            "submodule": "Events"
        },
        {
            "file": "js/component/EventEmitter.js",
            "line": 44,
            "description": "Adds a listener to the end of the listeners array for the specified event. No checks are made to see if the listener has already been added. Multiple calls passing the same combination of event and listener will result in the listener being added multiple times.",
            "example": [
                "\n\tserver.on('connection', function (stream) {\n\t  console.log('someone connected!');\n\t});\n\nReturns emitter, so calls can be chained."
            ],
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "name",
                    "description": "Identifier of the event to subscribe to",
                    "type": "String"
                },
                {
                    "name": "listener",
                    "description": "Callback function to receive the event",
                    "type": "Function"
                }
            ],
            "chainable": 1,
            "class": "EventEmitter",
            "module": "Browserify",
            "submodule": "Events"
        },
        {
            "file": "js/component/EventEmitter.js",
            "line": 59,
            "description": "Adds a one time listener for the event. This listener is invoked only the next time the event is fired, after which it is removed.",
            "example": [
                "\n\tserver.once('connection', function (stream) {\n\t  console.log('Ah, we have our first user!');\n\t});\n\nReturns emitter, so calls can be chained."
            ],
            "itemtype": "method",
            "name": "once",
            "params": [
                {
                    "name": "name",
                    "description": "Identifier of the event to subscribe to",
                    "type": "String"
                },
                {
                    "name": "listener",
                    "description": "Callback function to receive the event",
                    "type": "Function"
                }
            ],
            "chainable": 1,
            "class": "EventEmitter",
            "module": "Browserify",
            "submodule": "Events"
        },
        {
            "file": "js/component/EventEmitter.js",
            "line": 74,
            "description": "Remove a listener from the listener array for the specified event. Caution: changes array indices in the listener array behind the listener.",
            "example": [
                "\n\tvar callback = function(stream) {\n\t  console.log('someone connected!');\n\t};\n\tserver.on('connection', callback);\n\t// ...\n\tserver.removeListener('connection', callback);\n\nremoveListener will remove, at most, one instance of a listener from the listener array. If any single listener has been added multiple times to the listener array for the specified event, then removeListener must be called multiple times to remove each instance.\n\nReturns emitter, so calls can be chained."
            ],
            "itemtype": "method",
            "name": "removeListener",
            "params": [
                {
                    "name": "name",
                    "description": "identifier of the event to remove",
                    "type": "String"
                },
                {
                    "name": "listener",
                    "description": "callback that handled the event",
                    "type": "Function"
                }
            ],
            "chainable": 1,
            "class": "EventEmitter",
            "module": "Browserify",
            "submodule": "Events"
        },
        {
            "file": "js/component/EventEmitter.js",
            "line": 93,
            "description": "Removes all listeners, or those of the specified event. It's not a good idea to remove listeners that were added elsewhere in the code, especially when it's on an emitter that you didn't create (e.g. sockets or file streams).\n\nReturns emitter, so calls can be chained.",
            "itemtype": "method",
            "name": "removeAllListeners",
            "params": [
                {
                    "name": "name",
                    "description": "identifier of the events to be removed",
                    "type": "String",
                    "optional": true
                }
            ],
            "chainable": 1,
            "class": "EventEmitter",
            "module": "Browserify",
            "submodule": "Events"
        },
        {
            "file": "js/component/EventEmitter.js",
            "line": 101,
            "description": "By default EventEmitters will print a warning if more than 10 listeners are added for a particular event. This is a useful default which helps finding memory leaks. Obviously not all Emitters should be limited to 10. This function allows that to be increased. Set to zero for unlimited.\n\nReturns emitter, so calls can be chained.",
            "itemtype": "method",
            "name": "setMaxListeners",
            "params": [
                {
                    "name": "n",
                    "description": "maximum number of listeners to accept",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "EventEmitter",
            "module": "Browserify",
            "submodule": "Events"
        },
        {
            "file": "js/component/EventEmitter.js",
            "line": 110,
            "description": "`setMaxListeners(n)` sets the maximum on a per-instance basis. This class property lets you set it for all EventEmitter instances, current and future, effective immediately. Use with care.\n\nNote that emitter.setMaxListeners(n) still has precedence over EventEmitter.defaultMaxListeners.",
            "itemtype": "property",
            "name": "defaultMaxListeners",
            "static": 1,
            "class": "EventEmitter",
            "module": "Browserify",
            "submodule": "Events"
        },
        {
            "file": "js/component/EventEmitter.js",
            "line": 118,
            "description": "Returns an array of listeners for the specified event.",
            "example": [
                "\n\tserver.on('connection', function (stream) {\n\t  console.log('someone connected!');\n\t});\n\tconsole.log(util.inspect(server.listeners('connection'))); // [ [Function] ]"
            ],
            "itemtype": "method",
            "name": "listeners",
            "params": [
                {
                    "name": "name",
                    "description": "Name of the listeners to count",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Number of listeners",
                "type": "Number"
            },
            "class": "EventEmitter",
            "module": "Browserify",
            "submodule": "Events"
        },
        {
            "file": "js/component/EventEmitter.js",
            "line": 131,
            "description": "Execute each of the listeners in order with the supplied arguments.\n\nReturns true if event had listeners, false otherwise.",
            "itemtype": "method",
            "name": "emit",
            "params": [
                {
                    "name": "name",
                    "description": "Identifier of the event being emitted",
                    "type": "String"
                },
                {
                    "name": "arg*",
                    "description": "Arguments to be provided to the listeners",
                    "optional": true
                }
            ],
            "return": {
                "description": "true if event had listeners subscribed to it",
                "type": "Boolean"
            },
            "class": "EventEmitter",
            "module": "Browserify",
            "submodule": "Events"
        },
        {
            "file": "js/component/EventEmitter.js",
            "line": 141,
            "description": "Return the number of listeners for a given event.",
            "itemtype": "method",
            "name": "ListenerCount",
            "static": 1,
            "params": [
                {
                    "name": "emitter",
                    "description": "instance of a EventEmitter to check",
                    "type": "EventEmitter"
                },
                {
                    "name": "name",
                    "description": "identifier of the event",
                    "type": "String"
                }
            ],
            "return": {
                "description": "number of listeners",
                "type": "Number"
            },
            "class": "EventEmitter",
            "module": "Browserify",
            "submodule": "Events"
        },
        {
            "file": "js/component/EventEmitter.js",
            "line": 150,
            "description": "This event is emitted any time a listener is added. When this event is triggered, the listener may not yet have been added to the array of listeners for the event.",
            "itemtype": "event",
            "name": "newListener",
            "params": [
                {
                    "name": "name",
                    "description": "Identifier of the event being subscribed",
                    "type": "String"
                },
                {
                    "name": "listener",
                    "description": "the listener",
                    "type": "Function"
                }
            ],
            "class": "EventEmitter",
            "module": "Browserify",
            "submodule": "Events"
        },
        {
            "file": "js/component/EventEmitter.js",
            "line": 157,
            "description": "This event is emitted any time someone removes a listener. When this event is triggered, the listener may not yet have been removed from the array of listeners for the event.",
            "itemtype": "event",
            "name": "removeListener",
            "params": [
                {
                    "name": "name",
                    "description": "Identifier of the event being subscribed",
                    "type": "String"
                },
                {
                    "name": "listener",
                    "description": "the listener",
                    "type": "Function"
                }
            ],
            "class": "EventEmitter",
            "module": "Browserify",
            "submodule": "Events"
        },
        {
            "file": "js/component/http.js",
            "line": 24,
            "description": "Generic entry point for HTTP requests.  \nIt returns a Promise.\nIt queues and resolves a redraw request.\n\nWhen resolved successfully, the response will contain:\n\n* `body`{Object||String} It the request was for JSON data, it will be returned as an object, otherwise, the plain XHR `responseText`.\n* `statusCode` {Number} Values in the 2xx range will be considered successful, others, a rejection\n* `method` {String} The HTTP method that had been requested \n* `headers` {Object} The XHR response headers\n* `url` {String} The URL requested\n* `rawRequest` {XMLHttpRequest} The XHR object for this request\n\nThe promise can be rejected with a standard JavaScript `Error` object with at least `name` and `message` properties if the request could not be processed due to erroneous arguments.  If the response comes with an error code above the 2xx range, it will also be rejected with the same response object as a successful response.",
            "itemtype": "method",
            "name": "http",
            "params": [
                {
                    "name": "config",
                    "description": "See [xhr](https://www.npmjs.com/package/xhr)",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "as described above.",
                "type": "Promise"
            },
            "static": 1,
            "class": "http",
            "module": "utilities",
            "submodule": "http"
        },
        {
            "file": "js/component/http.js",
            "line": 62,
            "description": "Produces an HTTP GET request accepting JSON data.\nIt returns a Promise.\nIt queues and resolves a redraw request.\n\nWhen resolved successfully, the response will contain:\n\n* `body`{Object} An object with the JSON response already parsed.\n* `statusCode` {Number} Values in the 2xx range will be considered successful, others, a rejection\n* `method` {String} The value `GET` \n* `headers` {Object} The XHR response headers\n* `url` {String} The URL requested\n* `rawRequest` {XMLHttpRequest} The XHR object for this request\n\nThe promise can be rejected with a standard JavaScript `Error` object with at least `name` and `message` properties if the request could not be processed due to erroneous arguments.  If the response comes with an error code above the 2xx range, it will also be rejected with the same response object as a successful response.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "url",
                    "description": "URL for the request",
                    "type": "String"
                }
            ],
            "return": {
                "description": "as described above.",
                "type": "Promise"
            },
            "static": 1,
            "class": "http",
            "module": "utilities",
            "submodule": "http"
        },
        {
            "file": "js/component/http.js",
            "line": 90,
            "description": "Produces an HTTP POST (create) request sending and accepting JSON data.\nIt returns a Promise.\nIt queues and resolves a redraw request.\n\nWhen resolved successfully, the response will contain:\n\n* `body`{Object} An object with the JSON response already parsed.\n* `statusCode` {Number} Values in the 2xx range will be considered successful, others, a rejection\n* `method` {String} The value `POST` \n* `headers` {Object} The XHR response headers\n* `url` {String} The URL requested\n* `rawRequest` {XMLHttpRequest} The XHR object for this request\n\nThe promise can be rejected with a standard JavaScript `Error` object with at least `name` and `message` properties if the request could not be processed due to erroneous arguments.  If the response comes with an error code above the 2xx range, it will also be rejected with the same response object as a successful response.",
            "itemtype": "method",
            "name": "post",
            "params": [
                {
                    "name": "url",
                    "description": "URL for the request",
                    "type": "String"
                },
                {
                    "name": "body",
                    "description": "Data to be sent.  It will be turned into JSON before sending",
                    "type": "Object"
                }
            ],
            "static": 1,
            "class": "http",
            "module": "utilities",
            "submodule": "http"
        },
        {
            "file": "js/component/http.js",
            "line": 121,
            "description": "Alias of [post](#method_post).\nProduces an HTTP POST (create) request accepting JSON data.\nIt returns a Promise.\nIt queues and resolves a redraw request.\n\nWhen resolved successfully, the response will contain:\n\n* `body`{Object} An object with the JSON response already parsed.\n* `statusCode` {Number} Values in the 2xx range will be considered successful, others, a rejection\n* `method` {String} The value `POST` \n* `headers` {Object} The XHR response headers\n* `url` {String} The URL requested\n* `rawRequest` {XMLHttpRequest} The XHR object for this request\n\nThe promise can be rejected with a standard JavaScript `Error` object with at least `name` and `message` properties if the request could not be processed due to erroneous arguments.  If the response comes with an error code above the 2xx range, it will also be rejected with the same response object as a successful response.",
            "itemtype": "method",
            "name": "create",
            "params": [
                {
                    "name": "url",
                    "description": "URL for the request",
                    "type": "String"
                },
                {
                    "name": "body",
                    "description": "Data to be sent.  It will be turned into JSON before sending",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "as described above.",
                "type": "Promise"
            },
            "static": 1,
            "class": "http",
            "module": "utilities",
            "submodule": "http"
        },
        {
            "file": "js/component/http.js",
            "line": 146,
            "description": "Produces an HTTP PUT (update) request accepting JSON data.\nIt returns a Promise.\nIt queues and resolves a redraw request.\n\nWhen resolved successfully, the response will contain:\n\n* `body`{Object} An object with the JSON response already parsed.\n* `statusCode` {Number} Values in the 2xx range will be considered successful, others, a rejection\n* `method` {String} The value `PUT` \n* `headers` {Object} The XHR response headers\n* `url` {String} The URL requested\n* `rawRequest` {XMLHttpRequest} The XHR object for this request\n\nThe promise can be rejected with a standard JavaScript `Error` object with at least `name` and `message` properties if the request could not be processed due to erroneous arguments.  If the response comes with an error code above the 2xx range, it will also be rejected with the same response object as a successful response.",
            "itemtype": "method",
            "name": "put",
            "params": [
                {
                    "name": "url",
                    "description": "URL for the request",
                    "type": "String"
                },
                {
                    "name": "body",
                    "description": "Data to be sent.  It will be turned into JSON before sending",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "as described above.",
                "type": "Promise"
            },
            "static": 1,
            "class": "http",
            "module": "utilities",
            "submodule": "http"
        },
        {
            "file": "js/component/http.js",
            "line": 179,
            "description": "Alias of [put](#method_put).\nProduces an HTTP PUT (update) request accepting JSON data.\nIt returns a Promise.\nIt queues and resolves a redraw request.\n\nWhen resolved successfully, the response will contain:\n\n* `body`{Object} An object with the JSON response already parsed.\n* `statusCode` {Number} Values in the 2xx range will be considered successful, others, a rejection\n* `method` {String} The value `PUT` \n* `headers` {Object} The XHR response headers\n* `url` {String} The URL requested\n* `rawRequest` {XMLHttpRequest} The XHR object for this request\n\nThe promise can be rejected with a standard JavaScript `Error` object with at least `name` and `message` properties if the request could not be processed due to erroneous arguments.  If the response comes with an error code above the 2xx range, it will also be rejected with the same response object as a successful response.",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "url",
                    "description": "URL for the request",
                    "type": "String"
                },
                {
                    "name": "body",
                    "description": "Data to be sent.  It will be turned into JSON before sending",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "as described above.",
                "type": "Promise"
            },
            "static": 1,
            "class": "http",
            "module": "utilities",
            "submodule": "http"
        },
        {
            "file": "js/component/http.js",
            "line": 204,
            "description": "Produces an HTTP DELETE request.\nIt returns a Promise.\nIt queues and resolves a redraw request.\n\nWhen resolved successfully, the response will contain:\n\n* `body`{Object} An object with the JSON response already parsed.\n* `statusCode` {Number} Values in the 2xx range will be considered successful, others, a rejection\n* `method` {String} The value `DEL` \n* `headers` {Object} The XHR response headers\n* `url` {String} The URL requested\n* `rawRequest` {XMLHttpRequest} The XHR object for this request\n\nThe promise can be rejected with a standard JavaScript `Error` object with at least `name` and `message` properties if the request could not be processed due to erroneous arguments.  If the response comes with an error code above the 2xx range, it will also be rejected with the same response object as a successful response.",
            "itemtype": "method",
            "name": "del",
            "params": [
                {
                    "name": "url",
                    "description": "URL for the request",
                    "type": "String"
                }
            ],
            "return": {
                "description": "as described above.",
                "type": "Promise"
            },
            "static": 1,
            "class": "http",
            "module": "utilities",
            "submodule": "http"
        },
        {
            "file": "js/component/parcel.js",
            "line": 32,
            "description": "Type of DOM element that will be created to serve as a container for this Parcel.\nDefaults to a `DIV`",
            "itemtype": "property",
            "name": "containerType",
            "type": "String",
            "default": "DIV",
            "class": "Parcel",
            "module": "Parcela",
            "submodule": "parcel"
        },
        {
            "file": "js/component/parcel.js",
            "line": 43,
            "description": "CSS className to add to the container for this parcel.\nThis is in addition to the className of `parcel` which is\nautomatically added to all Parcel containers.",
            "itemtype": "property",
            "name": "className",
            "type": "String",
            "default": "''",
            "class": "Parcel",
            "module": "Parcela",
            "submodule": "parcel"
        },
        {
            "file": "js/component/parcel.js",
            "line": 54,
            "description": "Hash map of attributes for the container element",
            "itemtype": "property",
            "name": "attributes",
            "type": "Object",
            "default": ":null",
            "class": "Parcel",
            "module": "Parcela",
            "submodule": "parcel"
        },
        {
            "file": "js/component/parcel.js",
            "line": 63,
            "description": "String to be shown within the container.\n\nThis is used, mostly, for initial testing of layouts,\nto have something to show within the parcel.\nIt is rarely used in the final product.",
            "itemtype": "property",
            "name": "text",
            "type": "String",
            "class": "Parcel",
            "module": "Parcela",
            "submodule": "parcel"
        },
        {
            "file": "js/component/parcel.js",
            "line": 75,
            "description": "Destructor.  \n\nThe provided method checks all the instance properties and if any of them are \ninstances of Parcel or arrays of Parcel instances, \nit will call the `destructor` method on each of the child parcels.\n\nIt is a last-resort tactic to avoid leaving stuff behind.\nIn practice, it should be overriden to destroy only what each parcel has created.",
            "itemtype": "method",
            "name": "destructor",
            "class": "Parcel",
            "module": "Parcela",
            "submodule": "parcel"
        },
        {
            "file": "js/component/parcel.js",
            "line": 107,
            "description": "Called by the renderer before this Parcel is shown for the first time.\nIt is a good place to activate resources that are only usefull while the \nparcel is visible such as animations.\n\nThe provided method is empty, it can be overriden by each Parcela app.",
            "itemtype": "method",
            "name": "preView",
            "class": "Parcel",
            "module": "Parcela",
            "submodule": "parcel"
        },
        {
            "file": "js/component/parcel.js",
            "line": 118,
            "description": "Called by the renderer after this Parcel is hidden.\n\nIt is a good place to deactivate resources that are only usefull while the \nparcel is visible such as animations.\n\nThe provided method is empty, it can be overriden by each Parcela app.",
            "itemtype": "method",
            "name": "postView",
            "class": "Parcel",
            "module": "Parcela",
            "submodule": "parcel"
        },
        {
            "file": "js/component/parcel.js",
            "line": 131,
            "description": "Returns the virtual DOM for this parcel.\n\nMust be overriden by each Parcela app.  By default, it returns the value of the [text](#property_text) property.\n\nA virtual DOM node is composed of the following elements:\n\n* `tag` {String}:  Name of the HTML tag for the node to be created.\n* `attrs` {Object}: Collection of HTML attributes to be added to the node.\n* `children` {Array}: Array of virtual DOM nodes that will become children of the created node.\n\nAs a convenience, this method receives a reference to the [`vDOM.vNode`](vDOM.html#method_vNode)\nhelper function to produce the virtual DOM node, however it may be ignored as long as a\nvirtual DOM node is somehow returned.",
            "example": [
                "\n\tview: function (v) {\n\t\treturn v('div', [\n\t\t\tv('p.joyful','Hello Workd!'),\n\t\t\tv('hr'),\n\t\t\tv('p','(Not very original, really)')\n\t\t]);\n\t}\n\n\t// Equivalent to:\n\tview: function (v) {\n\t\treturn {tag:'div', attrs:{},children: [\n\t\t\t{tag:'p', attrs:{className:'joyful'}, children:['Hellow World!']},\n\t\t\t{tag:'hr', attrs: {}, children: []},\n\t\t\t{tag:'p', attrs:{}, children:['(Not very original, really)']}\n\t\t]};\n\t}"
            ],
            "itemtype": "method",
            "name": "view",
            "params": [
                {
                    "name": "v",
                    "description": "Reference to the [`vDOM.vNode`](vDOM.html#method_vNode) helper function.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "The expected virtual DOM node for this parcel.",
                "type": "VNode"
            },
            "class": "Parcel",
            "module": "Parcela",
            "submodule": "parcel"
        },
        {
            "file": "js/component/parcel.js",
            "line": 171,
            "description": "Returns a value representative of the state of this parcel.\nThe system will compare it with the previous state and if they match,\nit will assume the view has not changed.\n\nThe default function returns `NaN` which is always different than itself.\nIt may be overriden for optimization purposes.",
            "itemtype": "method",
            "name": "stamp",
            "return": {
                "description": "any simple value (no objects or such) that reflects the state of this view",
                "type": "Value"
            },
            "class": "Parcel",
            "module": "Parcela",
            "submodule": "parcel"
        },
        {
            "file": "js/component/parcelEv.js",
            "line": 93,
            "description": "Overrides the original (empty) [preView](Parcel.html#method_preView) to set the event listeners",
            "itemtype": "method",
            "name": "preView",
            "class": "ParcelEv",
            "module": "Parcela",
            "submodule": "parcelEv"
        },
        {
            "file": "js/component/parcelEv.js",
            "line": 120,
            "description": "Overrides the original (empty) [postView](Parcel.html#method_postView)\nto detach the event listeners.",
            "itemtype": "method",
            "name": "postView",
            "class": "ParcelEv",
            "module": "Parcela",
            "submodule": "parcelEv"
        },
        {
            "file": "js/component/parcelEv.js",
            "line": 133,
            "description": "Extends the original destructor method so as to detach all the event listeners",
            "itemtype": "method",
            "name": "destructor",
            "class": "ParcelEv",
            "module": "Parcela",
            "submodule": "parcelEv"
        },
        {
            "file": "js/component/radio.js",
            "line": 52,
            "description": "Emitted when a button is clicked.  It reports the `value` of the radio selected",
            "itemtype": "event",
            "name": "click",
            "params": [
                {
                    "name": "value",
                    "description": "value of the option seleted",
                    "type": "String"
                },
                {
                    "name": "ev",
                    "description": "original DOM event",
                    "type": "DOMEvent"
                }
            ],
            "class": "Radio",
            "module": "Components",
            "submodule": "radio"
        },
        {
            "file": "js/component/radio.js",
            "line": 60,
            "description": "Overrides Parcel's [view](Parcel.html#method_view) method to generate the set of radio buttons",
            "itemtype": "method",
            "name": "view",
            "access": "private",
            "tagname": "",
            "class": "Radio",
            "module": "Components",
            "submodule": "radio"
        },
        {
            "file": "js/component/tabView.js",
            "line": 88,
            "description": "Array of tab configuration entries.",
            "itemtype": "property",
            "name": "_tabs",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "TabView",
            "module": "Components",
            "submodule": "TabView"
        },
        {
            "file": "js/component/tabView.js",
            "line": 97,
            "description": "Reference to the active tab.",
            "itemtype": "property",
            "name": "_selected",
            "type": "Object",
            "default": "first available tab",
            "access": "private",
            "tagname": "",
            "class": "TabView",
            "module": "Components",
            "submodule": "TabView"
        },
        {
            "file": "js/component/tabView.js",
            "line": 107,
            "description": "Defines whether a close icon will be added to the left-justified tabs.",
            "itemtype": "property",
            "name": "_canClose",
            "type": "Boolean",
            "default": "true",
            "access": "private",
            "tagname": "",
            "class": "TabView",
            "module": "Components",
            "submodule": "TabView"
        },
        {
            "file": "js/component/tabView.js",
            "line": 117,
            "description": "vNode tag argument for the icon to be used as a close symbol in the tab.\nThe default is the [close](http://fortawesome.github.io/Font-Awesome/icon/times/) icon from [Font Awesome](http://fortawesome.github.io/Font-Awesome/).   It could be replaced by an `img` tag or a `div` with a suitable className.",
            "itemtype": "property",
            "name": "closeTag",
            "type": "String",
            "default": "'i.fa.fa-close'",
            "class": "TabView",
            "module": "Components",
            "submodule": "TabView"
        },
        {
            "file": "js/component/tabView.js",
            "line": 127,
            "description": "vNode tag argument for the icon to be used to label the tab to add more tabs.\nThe default is the [plus](http://fortawesome.github.io/Font-Awesome/icon/plus/) icon from [Font Awesome](http://fortawesome.github.io/Font-Awesome/).   It could be replaced by an `img` tag or a `div` with a suitable className.",
            "itemtype": "property",
            "name": "moreTag",
            "type": "String",
            "default": "'i.fa.fa-plus'",
            "class": "TabView",
            "module": "Components",
            "submodule": "TabView"
        },
        {
            "file": "js/component/tabView.js",
            "line": 139,
            "description": "Responds to clicks on the visible separator emitting the [more](#event_more).\nPropagation and default action of the event is halted.",
            "itemtype": "method",
            "name": "_onMore",
            "params": [
                {
                    "name": "ev",
                    "description": "",
                    "type": "DOMEvent"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "TabView",
            "module": "Components",
            "submodule": "TabView"
        },
        {
            "file": "js/component/tabView.js",
            "line": 147,
            "description": "Fired when the separator in between the left-justified tabs and the right-justified ones is clicked.\nIt is presumed that the purpose of this separator is to add more tabs to the set, hence its name.",
            "itemtype": "event",
            "name": "more",
            "params": [
                {
                    "name": "ev",
                    "description": "original click event as received from the browser.",
                    "type": "DOMEvent"
                }
            ],
            "class": "TabView",
            "module": "Components",
            "submodule": "TabView"
        },
        {
            "file": "js/component/tabView.js",
            "line": 161,
            "description": "Responds to clicks on the regular tabs (not the separator) by\ncalling setting the [selected](#property_selected) property.",
            "itemtype": "method",
            "name": "_onClick",
            "params": [
                {
                    "name": "ev",
                    "description": "",
                    "type": "DOMEvent"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "TabView",
            "module": "Components",
            "submodule": "TabView"
        },
        {
            "file": "js/component/tabView.js",
            "line": 185,
            "description": "Responds to a click on the close **`x`** mini-icon on the tab by calling\nthe [remove](#method_remove) method.",
            "itemtype": "method",
            "name": "_onClose",
            "params": [
                {
                    "name": "ev",
                    "description": "",
                    "type": "DOMEvent"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "TabView",
            "module": "Components",
            "submodule": "TabView"
        },
        {
            "file": "js/component/tabView.js",
            "line": 203,
            "description": "Sets/gets the name of the tab currently active.\n\nWhen setting, if the selected tab is not already selected,\nit shows the seleted tab and fires the [selected](#event_selected) event.",
            "itemtype": "property",
            "name": "selected",
            "type": "String",
            "default": "first tab",
            "class": "TabView",
            "module": "Components",
            "submodule": "TabView"
        },
        {
            "file": "js/component/tabView.js",
            "line": 214,
            "description": "Fires when a new tab is selected and becomes active.\nIt does not fire if the tab is already selected.",
            "itemtype": "event",
            "name": "selected",
            "params": [
                {
                    "name": "newTab",
                    "description": "Name of the tab selected",
                    "type": "String"
                },
                {
                    "name": "oldTab",
                    "description": "Name of the previously selected tab",
                    "type": "String"
                }
            ],
            "class": "TabView",
            "module": "Components",
            "submodule": "TabView"
        },
        {
            "file": "js/component/tabView.js",
            "line": 240,
            "description": "Returns the first tab that is not a separator.",
            "itemtype": "method",
            "name": "_firstAvailable",
            "return": {
                "description": "configuration entry of the first tab that is not a separator"
            },
            "access": "private",
            "tagname": "",
            "class": "TabView",
            "module": "Components",
            "submodule": "TabView"
        },
        {
            "file": "js/component/tabView.js",
            "line": 253,
            "description": "Adds a new tab to the right-most position of the left-justified set.\nEmits the [added](#event_added) event.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "tab",
                    "description": "Tab configuration:",
                    "type": "Object",
                    "props": [
                        {
                            "name": "name",
                            "description": "Identifier for this tab.",
                            "type": "String"
                        },
                        {
                            "name": "label",
                            "description": "Label to be shown in the tab.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "tab.name"
                        },
                        {
                            "name": "content",
                            "description": "Parcel to show when the tab is selected.",
                            "type": "Parcel"
                        }
                    ]
                },
                {
                    "name": "select",
                    "description": "Whether the added tab becomes active, defaults to true.",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "chainable": 1,
            "class": "TabView",
            "module": "Components",
            "submodule": "TabView"
        },
        {
            "file": "js/component/tabView.js",
            "line": 265,
            "description": "Fires when a tab is added.",
            "itemtype": "event",
            "name": "added",
            "params": [
                {
                    "name": "tab",
                    "description": "configuration setting for the new tab.",
                    "type": "Object"
                }
            ],
            "class": "TabView",
            "module": "Components",
            "submodule": "TabView"
        },
        {
            "file": "js/component/tabView.js",
            "line": 283,
            "description": "Returns the configuration entry for the given tab.",
            "itemtype": "method",
            "name": "getTab",
            "params": [
                {
                    "name": "name",
                    "description": "Name of the tab information sought.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Configuration entry for the tab or `null` if not found.",
                "type": "Object"
            },
            "class": "TabView",
            "module": "Components",
            "submodule": "TabView"
        },
        {
            "file": "js/component/tabView.js",
            "line": 301,
            "description": "Removes the named tab.\nIf the tab removed is active, the first available tab will be selected.\nFires the [remove](#event_remove) event.",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "name",
                    "description": "Identifier for the tab to be removed",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "TabView",
            "module": "Components",
            "submodule": "TabView"
        },
        {
            "file": "js/component/tabView.js",
            "line": 310,
            "description": "Fires when a tab is removed.",
            "itemtype": "event",
            "name": "remove",
            "params": [
                {
                    "name": "name",
                    "description": "Identifier of the tab removed",
                    "type": "String"
                },
                {
                    "name": "tab",
                    "description": "Configuration entry of the removed tab",
                    "type": "Object"
                }
            ],
            "class": "TabView",
            "module": "Components",
            "submodule": "TabView"
        },
        {
            "file": "js/component/tabView.js",
            "line": 335,
            "description": "Shows the TabView.\nOverride of `Parcel` [view](Parcel.html#method_view).",
            "access": "protected",
            "tagname": "",
            "class": "TabView",
            "module": "Components",
            "submodule": "TabView"
        },
        {
            "file": "js/component/tabView.js",
            "line": 378,
            "description": "Drops the references to the tab contents.\nIt does not call the destructors of the Parcels that make up that content,\nit simply drops the references to them.",
            "itemtype": "method",
            "name": "destructor",
            "access": "protected",
            "tagname": "",
            "class": "TabView",
            "module": "Components",
            "submodule": "TabView"
        },
        {
            "file": "js/component/virtual-dom.js",
            "line": 26,
            "description": "Hash of special `tagNames` that imply change in the XML namespacing.",
            "itemtype": "property",
            "name": "_xmlNS",
            "type": "hash",
            "access": "private",
            "tagname": "",
            "class": "vDOM",
            "module": "Parcela",
            "submodule": "virtual-DOM"
        },
        {
            "file": "js/component/virtual-dom.js",
            "line": 38,
            "description": "The virtual DOM for the application.",
            "itemtype": "property",
            "name": "_vDOM",
            "type": "vNode",
            "access": "private",
            "tagname": "",
            "class": "vDOM",
            "module": "Parcela",
            "submodule": "virtual-DOM"
        },
        {
            "file": "js/component/virtual-dom.js",
            "line": 47,
            "description": "Helper function to build [vNodes](vNode.html).\n\nIt takes the name of the `tag` to be created.\nIt supports the following four modifiers, following the rules of CSS selectors:\n\n* A `namespace` prefix followed by a colon:  `svg:line` (not needed, see note below)\n* One or more CSS classes, each preceeded by a dot: `div.list`\n* An `id` preceeded by a pound: `div#a1`\n* One or more attribute assignments, each enclosed in square brackets: `input[type=checkbox]`\n\nThough the last three modifiers can be set via the `attrs` argument,\nfor performance reasons, if they won't change during the application\nit is better to set them via the above modifiers and reserve\nthe attributes for variable parts.\n\nIf modifiers are used, the tagName itself can be omitter and a `div` will be assumed.\nThus, `#a1` is the same as `div#al`.\n\nAttributes `className` (or `class`) and `style` have special treatment.\n\nThe `className` attribute can be given as a string or as an array of values, the last being preferable.\n\nThe `style` attribute should be set with an object containing a hash map of style names to values.\nThe style names should be in JavaScript format, not CSS format that is, `backgroundColor` not `background-color`.\n\n*Pending:* Neither the `svg:` or the `math:` namespaces are required.  The renderer will add the corresponding\n`xmlns` attribute upon detecting the `<svg>` or `<math>` elements.  All elements contained within\nany of those will be properly namespaced.",
            "example": [
                "\n```\n\nvar v = vDOM.vNode;\n\nv('br');\n// produces:\n{tag: 'br', attrs:{}, children:[]}\n// Which will result in: <br/>\n\nv('ul.list', options.map(function (option) {\n\treturn v('li', {'data-key': option.key}, option.text);\n}));\n// produces:\n{tag:'ul', attrs: {className:'list'}, children: [\n\t{tag:'li', attrs: {'data-key': 'k1'}, children: ['first value']},\n\t{tag:'li', attrs: {'data-key': 'k2'}, children: ['second value']}\n}\n// Which would result in:\n//<ul class=\"list\">\n//    <li data-key=\"k1\">first value</li>\n//    <li data-key=\"k2\">second value</li>\n//</ul>\n\nv('a#google.external[href=\"http://google.com\"]\", 'Google');\n// would eventually result in:\n// <a id=\"google\" class=\"external\" href=\"http://google.com\">Google</a>\n```\nIt is recommended that unchanging classNames, IDs and attributes be encoded into the `tag` to improve\nefficiency, as these can be cached.   Use the `attrs` object for variable attributes."
            ],
            "itemtype": "method",
            "name": "vNode",
            "static": 1,
            "params": [
                {
                    "name": "tag",
                    "description": "Name of the tag to be created.\n Much like with a CSS selector,\n it can be followed by a `#` and an ID,\n any number of CSS classNames each preceded by a `.`\n and attribute assignments enclosed in square brackets (see example above).",
                    "type": "String"
                },
                {
                    "name": "attrs",
                    "description": "Collection of attributes to be set on the node.\n Any value assigned to the `className` attribute will be appended to those provided along the tag.",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "children",
                    "description": "It can be a further virtual DOM node, a parcel,\na simple value which will result in a text string or an array of either.",
                    "type": "Any",
                    "optional": true
                }
            ],
            "return": {
                "description": "virtual DOM node.",
                "type": "Object"
            },
            "class": "vDOM",
            "module": "Parcela",
            "submodule": "virtual-DOM"
        },
        {
            "file": "js/component/virtual-dom.js",
            "line": 203,
            "description": "Triggers the rendering process for the page or a specific parcel.\n\nThe rendering process starts with the production of a new virtual DOM for the page or component\nand a comparisson of the newly created *expected* DOM against the *existing* DOM.\nThe render process will only change those nodes in the actual DOM that differ in between the two.\n\nCalled without any arguments, it will start the process at the root of the virtual DOM.\nIf provided with an argument it will start the process at the branch of the virtual DOM\ncontrolled by the given Parcel instance.",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "parcel",
                    "description": "Instance of Parcel in control of a section of a page.",
                    "type": "Parcel",
                    "optional": true
                }
            ],
            "static": 1,
            "class": "vDOM",
            "module": "Parcela",
            "submodule": "virtual-DOM"
        },
        {
            "file": "js/component/virtual-dom.js",
            "line": 225,
            "description": "Determines which [Parcel](Parcel.html) is the root app for this page\nand which is the DOM element it corresponds to and renders the app.\n\nIf the root app controls the whole screen, the corresponding DOM element is going to be\n`document.body`, which is the default when omitted.",
            "itemtype": "method",
            "name": "rootApp",
            "params": [
                {
                    "name": "Parcel",
                    "description": "instance of [Parcel](Parcel.html) that is the root of the app.",
                    "type": "Parcel"
                },
                {
                    "name": "element",
                    "description": "DOM element that is the root of the app.",
                    "type": "DOM element",
                    "optional": true,
                    "optdefault": "document.body"
                },
                {
                    "name": "parcelConfig",
                    "description": "optional arguments to provide to Parcel when intantiating it.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "the root parcel just created (available in the [rootParcel](#property_rootParcel) property).",
                "type": "Parcel"
            },
            "static": 1,
            "class": "vDOM",
            "module": "Parcela",
            "submodule": "virtual-DOM"
        },
        {
            "file": "js/component/virtual-dom.js",
            "line": 266,
            "description": "Warns the rendering system that a redraw will be required, \nbut it should hold on until the operation about to be performed \n(usually an async one) is finished,\n[redrawReady](#method_redrawReady) should then be called.",
            "itemtype": "method",
            "name": "redrawPending",
            "static": 1,
            "class": "vDOM",
            "module": "Parcela",
            "submodule": "virtual-DOM"
        },
        {
            "file": "js/component/virtual-dom.js",
            "line": 279,
            "description": "Signals that the operation that would require a redraw has been finished\nand that, if no further async operations are pending, it may now proceed.\nOptionally, it may cancel the rendering.\nIt should be used paired with [redrawPending](#method_redrawPending).",
            "itemtype": "method",
            "name": "redrawReady",
            "params": [
                {
                    "name": "cancel",
                    "description": "If present and truish, the redraw will be cancelled.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "static": 1,
            "class": "vDOM",
            "module": "Parcela",
            "submodule": "virtual-DOM"
        },
        {
            "file": "js/component/virtual-dom.js",
            "line": 295,
            "description": "Executes the given function `fn` on all parcels in the vDOM\nstarting from the given `parcel`.",
            "itemtype": "method",
            "name": "_forAllPNodes",
            "params": [
                {
                    "name": "parcel",
                    "description": "parcel to start executing from",
                    "type": "Parcel"
                },
                {
                    "name": "fn",
                    "description": "function to execute on each parcel",
                    "type": "Function"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "vDOM",
            "module": "Parcela",
            "submodule": "virtual-DOM"
        },
        {
            "file": "js/component/virtual-dom.js",
            "line": 312,
            "description": "Calls `postView` on all the parcels in the branch starting\nat the given `parcel`",
            "itemtype": "method",
            "name": "_postViews",
            "params": [
                {
                    "name": "parcel",
                    "description": "parcel to start calling `postView` on.",
                    "type": "Parcel"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "vDOM",
            "module": "Parcela",
            "submodule": "virtual-DOM"
        },
        {
            "file": "js/component/virtual-dom.js",
            "line": 325,
            "description": "Returns a new `pNode` based on the given parcel and namspace.",
            "itemtype": "method",
            "name": "_buildPNode",
            "params": [
                {
                    "name": "parcel",
                    "description": "Parcel instance that serves as the basis for this parcel",
                    "type": "Parcel"
                },
                {
                    "name": "namespace",
                    "description": "current XML namespace URL",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "parentPNode",
                    "description": "The pNode that is the ancestor of this one.",
                    "type": "PNode",
                    "optional": true
                }
            ],
            "return": {
                "description": "a new `pNode` based on the given parcel",
                "type": "PNode"
            },
            "access": "private",
            "tagname": "",
            "class": "vDOM",
            "module": "Parcela",
            "submodule": "virtual-DOM"
        },
        {
            "file": "js/component/virtual-dom.js",
            "line": 347,
            "description": "Returns a new `vNode` based on the given `tag` and `namespace`",
            "itemtype": "method",
            "name": "_buildVNode",
            "params": [
                {
                    "name": "tag",
                    "description": "nodeName of the DOM node to be created.",
                    "type": "String"
                },
                {
                    "name": "namespace",
                    "description": "current XML namespace URL",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "a new `vNode`.",
                "type": "VNode"
            },
            "access": "private",
            "tagname": "",
            "class": "vDOM",
            "module": "Parcela",
            "submodule": "virtual-DOM"
        },
        {
            "file": "js/component/virtual-dom.js",
            "line": 371,
            "description": "Returns a string node.",
            "itemtype": "method",
            "name": "_buildStringNode",
            "params": [
                {
                    "name": "Text",
                    "description": "to make the string node of",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "StringNode"
            },
            "access": "private",
            "tagname": "",
            "class": "vDOM",
            "module": "Parcela",
            "submodule": "virtual-DOM"
        },
        {
            "file": "js/component/virtual-dom.js",
            "line": 384,
            "description": "Skips over Parcels whose stamp has not changed, looking for nested parcels within",
            "itemtype": "method",
            "name": "_skipPNode",
            "params": [
                {
                    "name": "children",
                    "description": "Array of children to lookk into",
                    "type": "[vNode | pNode]"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "vDOM",
            "module": "Parcela",
            "submodule": "virtual-DOM"
        },
        {
            "file": "js/component/virtual-dom.js",
            "line": 402,
            "description": "Runs the differences in between an existing and the expected `pNodes`",
            "itemtype": "method",
            "name": "_diffPNode",
            "params": [
                {
                    "name": "existing",
                    "description": "The existing `pNode`",
                    "type": "PNode"
                },
                {
                    "name": "parcel",
                    "description": "parcel that will supply the new pNode to compare against",
                    "type": "Parcel"
                },
                {
                    "name": "parentPNode",
                    "description": "The pNode that is the ancestor of this one.",
                    "type": "PNode",
                    "optional": true
                }
            ],
            "access": "protected",
            "tagname": "",
            "static": 1,
            "class": "vDOM",
            "module": "Parcela",
            "submodule": "virtual-DOM"
        },
        {
            "file": "js/component/virtual-dom.js",
            "line": 428,
            "description": "Runs the difference between an existing and the expected `vNode`\nand makes the necessaty changes on the DOM based on the differences.\nAt the end, the existing should match the expected.",
            "itemtype": "method",
            "name": "_diffVNodes",
            "params": [
                {
                    "name": "existing",
                    "description": "Branch of the virtual DOM that represents the actual, current DOM",
                    "type": "VNode"
                },
                {
                    "name": "expected",
                    "description": "The same branch as it should become",
                    "type": "VNode"
                },
                {
                    "name": "namespace",
                    "description": "current XML namespace URL",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "parentPNode",
                    "description": "The pNode that is the ancestor of this one.",
                    "type": "PNode",
                    "optional": true
                }
            ],
            "access": "protected",
            "tagname": "",
            "static": 1,
            "class": "vDOM",
            "module": "Parcela",
            "submodule": "virtual-DOM"
        },
        {
            "file": "js/component/virtual-dom.js",
            "line": 447,
            "description": "Compares the children of the existing and the expected vDOM and makes the necessary\nchanges so it updates to the expected.",
            "itemtype": "method",
            "name": "_diffChildren",
            "params": [
                {
                    "name": "parentEl",
                    "description": "Element that contains the children represented by the existing vNode",
                    "type": "DOMElement"
                },
                {
                    "name": "existing",
                    "description": "virtual representation of the actual DOM",
                    "type": "VNode"
                },
                {
                    "name": "expected",
                    "description": "virtual representation of how it should be",
                    "type": "VNode"
                },
                {
                    "name": "namespace",
                    "description": "current XML namespace URL",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "parentPNode",
                    "description": "The pNode that is the ancestor of this one.",
                    "type": "PNode",
                    "optional": true
                }
            ],
            "access": "protected",
            "tagname": "",
            "static": 1,
            "class": "vDOM",
            "module": "Parcela",
            "submodule": "virtual-DOM"
        },
        {
            "file": "js/component/virtual-dom.js",
            "line": 639,
            "description": "Compares the attributes of the existing virtual DOM and the expected\nand makes the differences.",
            "itemtype": "method",
            "name": "_diffAttrs",
            "params": [
                {
                    "name": "existing",
                    "description": "vNode whose attributes represent the current state",
                    "type": "VNode"
                },
                {
                    "name": "expected",
                    "description": "vNode whose attributes are the new expected state",
                    "type": "VNode"
                },
                {
                    "name": "namespace",
                    "description": "current XML namespace URL",
                    "type": "String",
                    "optional": true
                }
            ],
            "access": "protected",
            "tagname": "",
            "static": 1,
            "class": "vDOM",
            "module": "Parcela",
            "submodule": "virtual-DOM"
        },
        {
            "file": "js/component/virtual-dom.js",
            "line": 736,
            "description": "Compares the new and old list of classNames and\nif there is any difference, it sets the whole thing at once.",
            "itemtype": "method",
            "name": "_diffClassNames",
            "params": [
                {
                    "name": "existing",
                    "description": "virtual DOM node to apply this classNames to",
                    "type": "VDOM"
                },
                {
                    "name": "value",
                    "description": "Object literal containing the current values",
                    "type": "Array"
                },
                {
                    "name": "newValue",
                    "description": "Object literal containin the new values",
                    "type": "Array"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "vDOM",
            "module": "Parcela",
            "submodule": "virtual-DOM"
        },
        {
            "file": "js/component/virtual-dom.js",
            "line": 758,
            "description": "Compares the new and old styles and fixes the differences in the DOM",
            "itemtype": "method",
            "name": "_diffStyles",
            "params": [
                {
                    "name": "existing",
                    "description": "virtual DOM node to apply this styles to",
                    "type": "VDOM"
                },
                {
                    "name": "value",
                    "description": "Object literal containing the current values",
                    "type": "Object"
                },
                {
                    "name": "newValue",
                    "description": "Object literal containin the new values",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "vDOM",
            "module": "Parcela",
            "submodule": "virtual-DOM"
        },
        {
            "file": "js/component/virtual-dom.js",
            "line": 815,
            "description": "Represents the DOM `tagName` or node type.\nCorresponds to the HTML element type.",
            "itemtype": "property",
            "name": "tag",
            "type": "String",
            "default": "\"DIV\"",
            "static": 1,
            "class": "vNode",
            "module": "Parcela",
            "submodule": "virtual-DOM"
        },
        {
            "file": "js/component/virtual-dom.js",
            "line": 824,
            "description": "The value of the `xmlns` attribute for namespaced elements\nsuch as `svg`.",
            "itemtype": "property",
            "name": "namespace",
            "type": "String",
            "default": "undefined",
            "static": 1,
            "class": "vNode",
            "module": "Parcela",
            "submodule": "virtual-DOM"
        },
        {
            "file": "js/component/virtual-dom.js",
            "line": 833,
            "description": "DOM node corresponding to the virtual node.\nIt is only present in the internal vDOM and only assigned\nafter the DOM has been rendered.",
            "itemtype": "property",
            "name": "node",
            "type": "DOM element",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "vNode",
            "module": "Parcela",
            "submodule": "virtual-DOM"
        },
        {
            "file": "js/component/virtual-dom.js",
            "line": 843,
            "description": "Collection of the attributes of the DOM element.\nIt is an hash map of attribute names to attribute values.",
            "itemtype": "property",
            "name": "attrs",
            "type": "Object",
            "default": "{}",
            "static": 1,
            "class": "vNode",
            "module": "Parcela",
            "submodule": "virtual-DOM"
        },
        {
            "file": "js/component/virtual-dom.js",
            "line": 853,
            "description": "Array of children nodes of this node.\nThe children can be either\n* further vNodes,\n* pNodes\n* plain values which will be converted to strings or tNodes",
            "itemtype": "property",
            "name": "children",
            "type": "Array",
            "default": "undefined",
            "static": 1,
            "class": "vNode",
            "module": "Parcela",
            "submodule": "virtual-DOM"
        },
        {
            "file": "js/component/virtual-dom.js",
            "line": 865,
            "description": "Reference to the [Parcel](Parcel.html) instance that has produced this pNode\nand its descendants.",
            "itemtype": "property",
            "name": "parcel",
            "type": "Parcel",
            "static": 1,
            "class": "vNode",
            "module": "Parcela",
            "submodule": "virtual-DOM"
        },
        {
            "file": "js/component/virtual-dom.js",
            "line": 873,
            "description": "Value returned by the [`stamp()`](Parcel.html#method_stamp) method\nto compare whether the parcel contents has changed",
            "itemtype": "property",
            "name": "stamp",
            "type": "Any",
            "default": "NaN",
            "static": 1,
            "class": "vNode",
            "module": "Parcela",
            "submodule": "virtual-DOM"
        }
    ],
    "warnings": [
        {
            "message": "Missing item type\nShows the TabView.\nOverride of `Parcel` [view](Parcel.html#method_view).",
            "line": " js/component/tabView.js:335"
        }
    ]
}
